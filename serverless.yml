service: myserverlessproject2

provider:
    name: aws
    runtime: nodejs12.x
    stage: dev
    environment:
        stage: ${self:provider.stage}
        tableName: ${self:custom.tableName}        
        wsapiname: ${self:provider.websocketsApiName}
    websocketsApiName: ${self:service}-WS
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
          Resource: '*'

custom:
    tableName: WebsocketUsers
    queueName: QueueResponse

functions:
    websocket-connect:
        handler: lambdas/websockets/connect.handler
        events:
            - websocket:
                  route: $connect
    websocket-disconnect:
        handler: lambdas/websockets/disconnect.handler
        events:
            - websocket:
                  route: $disconnect
    websocket-default:
        handler: lambdas/websockets/default.handler
        events:
            - websocket:
                  route: $default
    websocket-message:
        handler: lambdas/websockets/message.handler
        events:
            - websocket:
                  route: message
    handler-response:
        handler: lambdas/websockets/handlerResponse.handler
        events:
            - sqs:
                batchSize: 10
                arn:
                    Fn::GetAtt:
                    - ResponseQueue
                    - Arn
        
                        
        
resources:
    Resources:
        WeboscketUserTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        ResponseQueue:
            Type: AWS::SQS::Queue
            Properties:
                QueueName: ${self:custom.queueName}-dev
    
